/*
 * This file is generated by jOOQ.
*/
package br.com.edfcbz.api.generatedclasses.tables;


import br.com.edfcbz.api.generatedclasses.Apirest;
import br.com.edfcbz.api.generatedclasses.Indexes;
import br.com.edfcbz.api.generatedclasses.Keys;
import br.com.edfcbz.api.generatedclasses.tables.records.AvailabilityRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Availability extends TableImpl<AvailabilityRecord> {

    private static final long serialVersionUID = -1750449516;

    /**
     * The reference instance of <code>apirest.availability</code>
     */
    public static final Availability AVAILABILITY = new Availability();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AvailabilityRecord> getRecordType() {
        return AvailabilityRecord.class;
    }

    /**
     * The column <code>apirest.availability.id</code>.
     */
    public final TableField<AvailabilityRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apirest.availability.startAvailability</code>.
     */
    public final TableField<AvailabilityRecord, Timestamp> STARTAVAILABILITY = createField("startAvailability", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>apirest.availability.finishAvailability</code>.
     */
    public final TableField<AvailabilityRecord, Timestamp> FINISHAVAILABILITY = createField("finishAvailability", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>apirest.availability</code> table reference
     */
    public Availability() {
        this(DSL.name("availability"), null);
    }

    /**
     * Create an aliased <code>apirest.availability</code> table reference
     */
    public Availability(String alias) {
        this(DSL.name(alias), AVAILABILITY);
    }

    /**
     * Create an aliased <code>apirest.availability</code> table reference
     */
    public Availability(Name alias) {
        this(alias, AVAILABILITY);
    }

    private Availability(Name alias, Table<AvailabilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Availability(Name alias, Table<AvailabilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Apirest.APIREST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AVAILABILITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AvailabilityRecord, Integer> getIdentity() {
        return Keys.IDENTITY_AVAILABILITY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AvailabilityRecord> getPrimaryKey() {
        return Keys.KEY_AVAILABILITY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AvailabilityRecord>> getKeys() {
        return Arrays.<UniqueKey<AvailabilityRecord>>asList(Keys.KEY_AVAILABILITY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Availability as(String alias) {
        return new Availability(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Availability as(Name alias) {
        return new Availability(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Availability rename(String name) {
        return new Availability(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Availability rename(Name name) {
        return new Availability(name, null);
    }
}
