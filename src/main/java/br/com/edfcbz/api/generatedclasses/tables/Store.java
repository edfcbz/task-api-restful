/*
 * This file is generated by jOOQ.
*/
package br.com.edfcbz.api.generatedclasses.tables;


import br.com.edfcbz.api.generatedclasses.Apirest;
import br.com.edfcbz.api.generatedclasses.Indexes;
import br.com.edfcbz.api.generatedclasses.Keys;
import br.com.edfcbz.api.generatedclasses.tables.records.StoreRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Store extends TableImpl<StoreRecord> {

    private static final long serialVersionUID = -700023294;

    /**
     * The reference instance of <code>apirest.store</code>
     */
    public static final Store STORE = new Store();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoreRecord> getRecordType() {
        return StoreRecord.class;
    }

    /**
     * The column <code>apirest.store.id</code>.
     */
    public final TableField<StoreRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>apirest.store.name</code>.
     */
    public final TableField<StoreRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>apirest.store.logo</code>.
     */
    public final TableField<StoreRecord, byte[]> LOGO = createField("logo", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>apirest.store.deliveryFee</code>.
     */
    public final TableField<StoreRecord, Double> DELIVERYFEE = createField("deliveryFee", org.jooq.impl.SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>apirest.store.deliveryFeeFreeOver</code>.
     */
    public final TableField<StoreRecord, Double> DELIVERYFEEFREEOVER = createField("deliveryFeeFreeOver", org.jooq.impl.SQLDataType.FLOAT, this, "");

    /**
     * The column <code>apirest.store.status_store_id</code>.
     */
    public final TableField<StoreRecord, Integer> STATUS_STORE_ID = createField("status_store_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>apirest.store</code> table reference
     */
    public Store() {
        this(DSL.name("store"), null);
    }

    /**
     * Create an aliased <code>apirest.store</code> table reference
     */
    public Store(String alias) {
        this(DSL.name(alias), STORE);
    }

    /**
     * Create an aliased <code>apirest.store</code> table reference
     */
    public Store(Name alias) {
        this(alias, STORE);
    }

    private Store(Name alias, Table<StoreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Store(Name alias, Table<StoreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Apirest.APIREST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORE_FK_STORE_STATUS_STORE1_IDX, Indexes.STORE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StoreRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoreRecord> getPrimaryKey() {
        return Keys.KEY_STORE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoreRecord>> getKeys() {
        return Arrays.<UniqueKey<StoreRecord>>asList(Keys.KEY_STORE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StoreRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StoreRecord, ?>>asList(Keys.FK_STORE_STATUS_STORE1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Store as(String alias) {
        return new Store(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Store as(Name alias) {
        return new Store(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Store rename(String name) {
        return new Store(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Store rename(Name name) {
        return new Store(name, null);
    }
}
